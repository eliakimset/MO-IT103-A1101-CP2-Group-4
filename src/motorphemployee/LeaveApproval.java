/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package motorphemployee;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import motorphemployee.LeaveManagement;

/**
 *
 * @author set
 */
public class LeaveApproval extends javax.swing.JFrame {

    /**
     * Creates new form LeaveApproval
     */
    public LeaveApproval() {
        initComponents();
        displayPendingLeaves();
    }
    
    private void displayPendingLeaves() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clear existing rows
        
        String csvFile = "src/motorphemployee/pendingleaves.csv";
        String line;
        try (BufferedReader br = new BufferedReader(new FileReader(csvFile))) {
            while ((line = br.readLine()) != null) {
                String[] data = line.split(",");
                model.addRow(data);
            }
        } catch (IOException e) {
            System.err.println("Error reading CSV file: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        approved = new javax.swing.JButton();
        rejected = new javax.swing.JButton();
        Exit = new javax.swing.JButton();
        back = new javax.swing.JButton();
        save = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        logo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jTable1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee ID", "Leave Type", "Days", "Reason"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        approved.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/approve.png"))); // NOI18N
        approved.setText("Approve");
        approved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approvedActionPerformed(evt);
            }
        });

        rejected.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/reject.png"))); // NOI18N
        rejected.setText("Reject");
        rejected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectedActionPerformed(evt);
            }
        });

        Exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/exit.png"))); // NOI18N
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/previous.png"))); // NOI18N
        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/save.png"))); // NOI18N
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel1.setText("Leave Approval Center");

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/MotorPH logo.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(logo, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Exit)
                                .addGap(18, 18, 18)
                                .addComponent(save))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 855, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rejected)
                                .addGap(18, 18, 18)
                                .addComponent(approved)))))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(logo, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(save)
                            .addComponent(Exit)
                            .addComponent(back))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rejected)
                    .addComponent(approved))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(898, 575));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
    LeaveManagement leaveManagement = new LeaveManagement();
    
    leaveManagement.setVisible(true);
    
    this.dispose();
    }//GEN-LAST:event_backActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_ExitActionPerformed

    private void approvedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approvedActionPerformed
      int selectedRowIndex = jTable1.getSelectedRow();
    if (selectedRowIndex == -1) {
        JOptionPane.showMessageDialog(this, "Please select a leave request to approve.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    // Get the data from the selected row
    String employeeId = (String) jTable1.getValueAt(selectedRowIndex, 0);
    String leaveType = (String) jTable1.getValueAt(selectedRowIndex, 1);
    int days = Integer.parseInt((String) jTable1.getValueAt(selectedRowIndex, 2));
    String reason = (String) jTable1.getValueAt(selectedRowIndex, 3);
    
    // Add the approval status
    String approval = "Yes";
    
    // Update leave credits and approved leaves
    if (updateLeaveCredits(employeeId, days, true)) {
        // Append the data to the CSV file
        writeToFile(employeeId, leaveType, days, reason, approval);
        
        // Remove the approved row from the table model
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.removeRow(selectedRowIndex);
    }
}    
    
    private void writeToFile(String employeeId, String leaveType, int days, String approval, String reason) {
        String csvFile = "src/motorphemployee/leaves.csv";
    try (BufferedWriter writer = new BufferedWriter(new FileWriter(csvFile, true))) {
        writer.write(employeeId + "," + leaveType + "," + days + "," + reason + "," + approval + "\n");
        JOptionPane.showMessageDialog(this, "Leave request processed successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "An error occurred while processing the leave request: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    }//GEN-LAST:event_approvedActionPerformed

    private void rejectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejectedActionPerformed
        // TODO add your handling code here:
    int selectedRowIndex = jTable1.getSelectedRow();
    if (selectedRowIndex == -1) {
        JOptionPane.showMessageDialog(this, "Please select a leave request to reject.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    // Get the data from the selected row
    String employeeId = (String) jTable1.getValueAt(selectedRowIndex, 0);
    String leaveType = (String) jTable1.getValueAt(selectedRowIndex, 1);
    int days = Integer.parseInt((String) jTable1.getValueAt(selectedRowIndex, 2));
    String reason = (String) jTable1.getValueAt(selectedRowIndex, 3);
    
    // Add the approval status
    String approval = "No";
    
    // Update rejected leaves
    if (updateLeaveCredits(employeeId, days, false)) {
        // Append the data to the CSV file
        writeToFile(employeeId, leaveType, days, reason, approval);
        
        // Remove the rejected row from the table model
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.removeRow(selectedRowIndex);
    }                             
    }//GEN-LAST:event_rejectedActionPerformed

     //User must save it first to reflect on the CSV File for validation
    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

    try (BufferedWriter bw = new BufferedWriter(new FileWriter("src/motorphemployee/pendingleaves.csv"))) {
        // Write data rows
        for (int i = 0; i < model.getRowCount(); i++) {
            for (int j = 0; j < model.getColumnCount(); j++) {
                bw.write(model.getValueAt(i, j).toString());
                if (j < model.getColumnCount() - 1) {
                    bw.write(",");
                }
            }
            bw.newLine();
        }
        JOptionPane.showMessageDialog(this, "Saved successfully!");
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error saving data to CSV file: " + e.getMessage());
}
    }
    
    private boolean updateLeaveCredits(String employeeId, int days, boolean isApproved) {
    String filePath = "src/motorphemployee/data.csv";
    List<String[]> records = new ArrayList<>();
    boolean found = false;

    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
        String line;
        while ((line = br.readLine()) != null) {
            String[] data = line.split(",");
            if (data[0].equals(employeeId)) {
                int leaveCredits = Integer.parseInt(data[21]);
                int approvedLeaves = Integer.parseInt(data[22]);
                int rejectedLeaves = Integer.parseInt(data[23]);

                if (isApproved) {
                    if (leaveCredits >= days) {
                        data[21] = String.valueOf(leaveCredits - days);
                        data[22] = String.valueOf(approvedLeaves + days);
                    } else {
                        JOptionPane.showMessageDialog(this, "Not enough leave credits.", "Error", JOptionPane.ERROR_MESSAGE);
                        return false;
                    }
                } else {
                    data[23] = String.valueOf(rejectedLeaves + 1);
                }
                found = true;
            }
            records.add(data);
        }
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error reading data file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }
    
    if (!found) {
        JOptionPane.showMessageDialog(this, "Employee ID not found.", "Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }
    
    try (PrintWriter pw = new PrintWriter(new FileWriter(filePath))) {
        for (String[] record : records) {
            pw.println(String.join(",", record));
        }
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error writing data file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }
    
    return true;
    }//GEN-LAST:event_saveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LeaveApproval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LeaveApproval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LeaveApproval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LeaveApproval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LeaveApproval().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Exit;
    private javax.swing.JButton approved;
    private javax.swing.JButton back;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel logo;
    private javax.swing.JButton rejected;
    private javax.swing.JButton save;
    // End of variables declaration//GEN-END:variables
}
